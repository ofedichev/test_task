{"version":3,"sources":["redux/action-types/index.js","redux/action-creators/index.js","components/Details.js","utils/consts.js","pages/CardPage.js","components/Character.js","components/Characters.js","routes.js","pages/MainPage.js","components/AppRouter.js","App.js","redux/redusers/loading-reduсer.js","redux/index.js","index.js"],"names":["START_CHARACTERS_LOADING","END_CHARACTERS_LOADING","SET_CHARACTERS","loadCharacters","id","dispatch","a","type","fetch","resp","json","payload","console","error","Details","characterId","useParams","uncontrolledInput","useRef","useState","controlledInput","setControlledInput","log","useSelector","store","characters","isLoading","useDispatch","useEffect","Container","className","style","color","Card","width","Img","variant","src","image","Body","Title","name","Text","gender","ListGroup","ListGroupItem","species","disabled","status","defaultValue","created","ref","onChange","e","target","value","to","Button","CardPage","Character","Characters","character","setCharacter","onClick","prevCharacter","routes","path","Component","CARD_ROUTE","AppRouter","map","component","exact","App","initialState","createStore","state","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.953b6143.chunk.js","sourcesContent":["const START_CHARACTERS_LOADING = 'START_CHARACTERS_LOADING';\r\nconst END_CHARACTERS_LOADING = 'END_CHARACTERS_LOADING'\r\nconst SET_CHARACTERS = 'CHARACTERS'\r\n\r\n\r\nexport {\r\n    START_CHARACTERS_LOADING,\r\n    END_CHARACTERS_LOADING,\r\n    SET_CHARACTERS,\r\n}","import {\r\n    START_CHARACTERS_LOADING,\r\n    END_CHARACTERS_LOADING,\r\n    SET_CHARACTERS,\r\n} from '../action-types'\r\n\r\n\r\nconst startCharactersLoading = () => ({ type: START_CHARACTERS_LOADING })\r\nconst endCharactersLoading = () => ({ type: END_CHARACTERS_LOADING })\r\nconst setCharacters = (payload) => ({ type: SET_CHARACTERS, payload })\r\nconst loadCharacters = (id) => async(dispatch) => {\r\n    try {\r\n        dispatch(startCharactersLoading(id))\r\n        const resp = await fetch(`https://rickandmortyapi.com/api/character/${id}`)\r\n        const json = await resp.json();\r\n        dispatch(setCharacters(json))\r\n       \r\n  \r\n      }\r\n      catch (e) {\r\n        console.error(e)\r\n      }\r\n      finally{\r\n        dispatch(endCharactersLoading())\r\n      }\r\n    }\r\nexport {\r\n    startCharactersLoading,\r\n    endCharactersLoading,\r\n    setCharacters,\r\n    loadCharacters\r\n}","import React, { useEffect, useRef, useState } from 'react'\r\nimport { Card, ListGroupItem, ListGroup, Container, Button } from 'react-bootstrap';\r\nimport { useSelector, useDispatch, } from 'react-redux'\r\nimport { loadCharacters } from '../redux/action-creators'\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { MAIN_ROUTE } from '../utils/consts'\r\n\r\n\r\nconst Details = () => {\r\n\r\n    let { characterId } = useParams();\r\n    let uncontrolledInput = useRef();\r\n    let [controlledInput, setControlledInput] = useState();\r\n    console.log(controlledInput)\r\n\r\n    const { characters, isLoading } = useSelector(store => store);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(loadCharacters(characterId));\r\n    }, [dispatch, characterId])\r\n\r\n    console.log(characters)\r\n\r\n    return (\r\n\r\n        <Container className='d-flex justify-content-center'>\r\n            {isLoading && (<h1 style={{ color: 'red' }}>LOADING</h1>)}\r\n            {!isLoading && <Card className='pt-2' style={{ width: '18rem' }}>\r\n                <div className='d-flex justify-content-center'><h4>DETAILS</h4></div>\r\n                <Card.Img variant=\"top\" src={characters.image} />\r\n                <Card.Body>\r\n                    <Card.Title>\r\n                        Name: {characters.name}\r\n                    </Card.Title>\r\n                    <Card.Text >\r\n                        Gender: {characters.gender}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                <ListGroup className=\"list-group-flush\">\r\n                    <ListGroupItem>\r\n                        Species: {characters.species}\r\n                    </ListGroupItem>\r\n                    <ListGroupItem disabled={characters.type === '' ? true : false}>\r\n                        Type: {characters.type}\r\n                    </ListGroupItem>\r\n                    <ListGroupItem variant={characters.status === 'Alive' ? 'success' : 'danger'}>Status: {characters.status}</ListGroupItem>\r\n                    <ListGroupItem><p>uncontrolled input with information when character created, try to change it: </p> <input defaultValue={characters.created} ref={uncontrolledInput} /></ListGroupItem>\r\n                    <ListGroupItem><p>same information, but this is controlled input, check console)</p><input defaultValue={characters.created} onChange={(e) => setControlledInput(e.target.value)}></input></ListGroupItem>\r\n                </ListGroup>\r\n                <Link to={MAIN_ROUTE}><Button style={{ width: '286px' }} className=\"pull-right mr-1\" >Go back</Button></Link>\r\n            </Card>}\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\nexport default Details;\r\n","export const MAIN_ROUTE = '/'\r\nexport const CARD_ROUTE = '/character'","import React from 'react'\r\nimport Details from '../components/Details'\r\n\r\nconst CardPage = () => {\r\n    return (\r\n        <Details/>\r\n    )\r\n}\r\n\r\nexport default CardPage\r\n","import React from 'react'\r\nimport { Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Character = ({ image, name, id, status }) => {\r\n\r\n\r\n\r\n    return (\r\n        <Link to={`/character/${id}`}>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Img variant=\"top\" src={image} />\r\n                <Card.Body>\r\n                    <Card.Title>{name}</Card.Title>\r\n                    <Card.Title>{status}</Card.Title>\r\n                </Card.Body>\r\n            </Card>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Character\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Container, Button } from 'react-bootstrap';\r\nimport { useSelector, useDispatch, } from 'react-redux'\r\nimport { loadCharacters } from '../redux/action-creators'\r\nimport Character from './Character';\r\n\r\nconst Characters = () => {\r\n    const [character, setCharacter] = useState(1);\r\n    const { characters, isLoading } = useSelector(store => store);\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(loadCharacters(character));\r\n    }, [dispatch, character])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Container style={{ width: '320px' }}>\r\n            {isLoading && (<h1 style={{ color: 'red' }}>LOADING</h1>)}\r\n            {!isLoading && <Character {...characters} />}\r\n            <div className='d-flex justify-content-center'>\r\n                <Button disabled={character === 1} className='mt-1' onClick={() => setCharacter(prevCharacter => prevCharacter - 1)}>Prev</Button>\r\n                <Button className='mt-1 ml-1' onClick={() => setCharacter(prevCharacter => prevCharacter + 1)}>Next </Button>\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Characters;\r\n\r\n\r\n\r\n\r\n\r\n","import { CARD_ROUTE, MAIN_ROUTE } from \"./utils/consts\"\r\nimport CardPage from \"./pages/CardPage\";\r\nimport MainPage from \"./pages/MainPage\";\r\n\r\nexport const routes = [\r\n    {\r\n        path: MAIN_ROUTE,\r\n        Component: MainPage\r\n    },\r\n    {\r\n        path: CARD_ROUTE + '/:characterId',\r\n        Component: CardPage\r\n    }\r\n]","import React from 'react'\r\nimport Characters from '../components/Characters'\r\n\r\n\r\n\r\nconst MainPage = () => {   \r\n    return (\r\n        <Characters />\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react'\r\nimport {\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport { routes } from '../routes'\r\nimport { MAIN_ROUTE} from '../utils/consts'\r\n\r\nconst AppRouter = () => {\r\n\r\n\r\n    return (\r\n        <Switch>\r\n            {routes.map(({ path, Component }) => <Route key={path} path={path} component={Component} exact />)}\r\n            <Redirect to={MAIN_ROUTE} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import React from 'react'\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport AppRouter from './components/AppRouter';\n\nfunction App() {\n\n\n\n  return (\n    <Router>\n      <AppRouter />\n    </Router>\n  );\n}\n\nexport default App;\n","import {\r\n    START_CHARACTERS_LOADING,\r\n    END_CHARACTERS_LOADING,\r\n    SET_CHARACTERS,\r\n} from '../action-types'\r\n\r\nconst initialState = {\r\n    characters: [],\r\n    isLoading: false,\r\n}\r\nexport const reduсer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case START_CHARACTERS_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n            }\r\n        }\r\n        case END_CHARACTERS_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n            }\r\n        }\r\n        case SET_CHARACTERS: {\r\n            return {\r\n                ...state,\r\n                characters: action.payload,\r\n                isLoading: false,\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reduсer } from './redusers/loading-reduсer'\r\n\r\nexport const store = createStore(reduсer, applyMiddleware(thunk))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './redux'\nimport { Provider } from 'react-redux'\n\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById('root')\n\n);\n"],"sourceRoot":""}